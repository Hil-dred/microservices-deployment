name: Deploy to EKS Cluster

on:
  push:
    branches:
      - initial

permissions:
  id-token: write # This is required for requesting the JWT


jobs:

  trivy_scan:
    name: Scan Docker Image for Vulnerabilities
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Install Trivy
        run: |
          wget https://github.com/aquasecurity/trivy/releases/download/v0.43.0/trivy_0.43.0_Linux-64bit.deb
          sudo dpkg -i trivy_0.43.0_Linux-64bit.deb
          trivy --version  # Verify Trivy installation

      - name: Scan Docker image with Trivy
        run: |
          echo "Scanning Docker image for vulnerabilities for CARTS..."
          trivy image --severity HIGH,CRITICAL --format table ${{ secrets.CARTS_IMAGE }}

          echo "Scanning Docker image for vulnerabilities for CARTS DB..."
          trivy image --severity HIGH,CRITICAL --format table ${{ secrets.CARTS_DB_IMAGE }}

          echo "Scanning Docker image for vulnerabilities for CATALOGUE..."
          trivy image --severity HIGH,CRITICAL --format table ${{ secrets.CATALOGUE_IMAGE }}

          echo "Scanning Docker image for vulnerabilities for CATALOGUE DB..."
          trivy image --severity HIGH,CRITICAL --format table ${{ secrets.CATALOGUE_DB_IMAGE }}

          echo "Scanning Docker image for vulnerabilities for FRONTEND..."
          trivy image --severity HIGH,CRITICAL --format table ${{ secrets.FRONT_END_IMAGE }}

          echo "Scanning Docker image for vulnerabilities for ORDERS..."
          trivy image --severity HIGH,CRITICAL --format table ${{ secrets.ORDERS_IMAGE }}

          echo "Scanning Docker image for vulnerabilities for ORDERS DB..."
          trivy image --severity HIGH,CRITICAL --format table ${{ secrets.ORDERS_DB_IMAGE }}

          echo "Scanning Docker image for vulnerabilities for PAYMENT..."
          trivy image --severity HIGH,CRITICAL --format table ${{ secrets.PAYMENT_IMAGE }}

          echo "Scanning Docker image for vulnerabilities for QUEUE MASTER..."
          trivy image --severity HIGH,CRITICAL --format table ${{ secrets.QUEUE_MASTER_IMAGE }}

          echo "Scanning Docker image for vulnerabilities for RABBITMQ..."
          trivy image --severity HIGH,CRITICAL --format table ${{ secrets.RABBITMQ_IMAGE }}

          echo "Scanning Docker image for vulnerabilities for RABBITMQ EXPORTER..."
          trivy image --severity HIGH,CRITICAL --format table ${{ secrets.RABBITMQ_EXPORTER_IMAGE }}

          echo "Scanning Docker image for vulnerabilities for SESSION DB..."
          trivy image --severity HIGH,CRITICAL --format table ${{ secrets.SESSION_DB_IMAGE }}
          
          echo "Scanning Docker image for vulnerabilities for SHIPPING..."
          trivy image --severity HIGH,CRITICAL --format table ${{ secrets.SHIPPING_IMAGE }}
          
          echo "Scanning Docker image for vulnerabilities for USER..."
          trivy image --severity HIGH,CRITICAL --format table ${{ secrets.USER_IMAGE }}
          
          echo "Scanning Docker image for vulnerabilities for USER DB..."
          trivy image --severity HIGH,CRITICAL --format table ${{ secrets.USER_DB_IMAGE }}

  deploy:
    runs-on: ubuntu-latest
    needs: trivy_scan

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.OIDC_ROLE_ARN }}
          aws-region: ${{ vars.region }}

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/v1.26.3/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl
          kubectl version --client

      - name: Install eksctl
        run: |
          curl --silent --location "https://github.com/weaveworks/eksctl/releases/download/v0.111.0/eksctl_Linux_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin

      - name: Set up kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ vars.region }} --name ${{ secrets.CLUSTER_NAME }};
          kubectl config set-context --current --namespace=${{ vars.namespace }}

      - name: Deploy to EKS Cluster
        run: |
          kubectl apply -f kubernetes-deployment/cluster-deploy

      - name: Verify Deployment
        run: |
          kubectl get pods
          kubectl get ingress